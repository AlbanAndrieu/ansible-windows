---
dependencies: []

galaxy_info:
  author: Alban Andrieu
  description: A role for installing windows
  company: Nabla
  license: Apache
  min_ansible_version: "2.5.0"
  platforms:
    - name: Windows
      versions:
        - all
        - 2012R2
  galaxy_tags:
    - system

ansigenome_info:
  galaxy_id: ""
  galaxy_user: "alban.andrieu"
  galaxy_name: "windows"

  travis: False

  synopsis: |
    Goal of this project is to launch ansible script using [pywinrm](https://pypi.python.org/pypi/pywinrm).
    A VagrantFile is downloading a windows 2012 server VM that will be hosted on VirtualBox.
    Then we are launching Ansible script in order to set up this VM.

    VM was taken from
    ------------------

    https://vagrantcloud.com/opentable/boxes/win-2012r2-standard-amd64-nocm/versions/1.0.0/providers/virtualbox.box

    ## Actions

    - Ensures that windows is installed

    WARNING : In inventory file, please use ansible_ssh_user and ansible_ssh_pass instead of ansible_user ansible_password, because of vault overridden values

    Usage example
    ------------

        - name: Install windows
          connection: local
          hosts: windows

          roles:
            - role: windows

    ### Requirements

    On Ubuntu, where VirtualBox and Vagrant are installed, do not forge to do the following :
    sudo pip install https://github.com/diyan/pywinrm/archive/df049454a9309280866e0156805ccda12d71c93a.zip --upgrade

    It is working with the following version :

    # Os is an Ubuntu 18.04

    $ python -V
    Python 2.7.3
    $ pip -V
    pip 1.4.1 from /usr/local/lib/python2.7/dist-packages (python 2.7)

    $ VBoxManage --version
    4.3.28r100309

    $ vagrant --version
    Vagrant 2.3.1.0

    $ vagrant plugin list
    winrm (1.1.3)
    vagrant-login (1.0.1, system)
    vagrant-share (1.1.0, system)

    $ ansible --version
    ansible 1.7.2

    Ansible 2.5.0 is required on order to have win_copy working on Windows 7 and Windows Server 2016

    Check winrm in target host

    ```
    winrm id
    winrm get winrm/config
    ```

    For older version of Windows, please do

    ```
    Set-Item WSMan:\localhost\Shell\MaxMemoryPerShellMB 5000
    Set-Item WSMan:\localhost\Plugin\Microsoft.PowerShell\Quotas\MaxMemoryPerShellMB 5000
    ```

    Restart-Service winrm

    ```
    winrm set winrm/config/winrs '@{MaxMemoryPerShellMB="0"}'
    ```

    # On the windows VM :

    ```
    powershell -File upgrade_to_ps3.ps1
    ```

    ```
    @powershell -NoProfile -ExecutionPolicy unrestricted -Command "iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))" && SET PATH=%PATH%;%systemdrive%\chocolatey\bin
    cinst powershell
    ```

    ```
    choco install powershell
    choco upgrade powershell
    ```

    ```
    powershell -File ConfigureRemotingForAnsible.ps1
    ```


    Test winrm
    ------------

    See [windows_winrm](https://docs.ansible.com/ansible/latest/user_guide/windows_winrm.html)

    See [common-winrm-issues](https://docs.ansible.com/ansible/devel/user_guide/windows_setup.html#common-winrm-issues)

    From windows

    Local user
    $ winrm identify -u:myuser -p:Mypass123! -r:http://targetHost:5985
    Domain user
    $ winrm identify -u:MISYSROOT\aandrieu -p:Mypass123! -r:http://targetHost:5985

    Test out HTTP
    $ winrs -r:http://server:5985/wsman -u:Username -p:Password ipconfig

    Test out HTTPS (will fail if the cert is not verifiable)
    $ winrs -r:http://server:5985/wsman -u:Username -p:Password -ssl ipconfig

    From unix

    User prompted for REALM name and KDC for Kerberos
    $ sudo apt-get install python-dev libkrb5-dev krb5-user

    Python WinRM module
    $ sudo pip install pyOpenSSL --upgrade
    $ sudo pip install "pywinrm>=0.2.2"

    Ignore warnings about maj_stat
    $ sudo pip install kerberos

    Kerberos and CredSSP
    $ sudo pip install "pywinrm[kerberos]"
    $ sudo pip install "pywinrm[credssp]"
    $ sudo pip install "requests-credssp" "requests-kerberos"

    Get xmllint for pretty print of SOAP response
    $ sudo apt-get install libxml2-utils -y

    Replace 'targetHost' with the target Windows host
    $ curl --header "Content-Type: application/soap+xml;charset=UTF-8" --header "WSMANIDENTIFY: unauthenticated" http://targetHost:5985/wsman --data '&lt;s:Envelope xmlns:s="http://www.w3.org/2003/05/soap-envelope" xmlns:wsmid="http://schemas.dmtf.org/wbem/wsman/identity/1/wsmanidentity.xsd"&gt;&lt;s:Header/&gt;&lt;s:Body&gt;&lt;wsmid:Identify/&gt;&lt;/s:Body&gt;&lt;/s:Envelope&gt;' | xmllint --format -

    Basic authentication is not enabled by default on a Windows host but can be enabled by running the following in PowerShell:
    $ Set-Item -Path WSMan:\localhost\Service\Auth\Basic -Value $true

    $ Set-Item -Path WSMan:\localhost\Service\Auth\Certificate -Value $true
    $ New-SelfSignedCertificate
    $ (Get-Service -Name winrm).Status

    $ .\ConfigureRemotingForAnsible.ps1 -ForceNewSSLCert

    Link :

    [Install PowerShell](https://github.com/AlbanAndrieu/ansible-windows/blob/master/files/upgrade_to_ps3.ps1)
    [Configure remoting](https://github.com/AlbanAndrieu/ansible-windows/blob/master/files/ConfigureRemotingForAnsible.ps1)
    [Disable password](http://www.tenniswood.co.uk/technology/windows/how-to-disable-password-expiration-for-windows-server-2012/)


    Automate jenkins service
    ------------

    Change default JDK if wrong
    Replace Path Environment variable from C:\ProgramData\Oracle\Java\javapath by %JAVA_HOME%\bin
    Replace regedit Registry key 'Software\JavaSoft\Java Runtime Environment'\CurrentVersion' but 1.7
    Replace regedit Registry key 'Software\JavaSoft\Java Development Kit'\CurrentVersion' but 1.7

    Check the java web start default JDK
    $ javaws -viewer
    Run the java web start by hand if the JDK is not right
    $ javaws  "slave-agent.jnlp"

    Add -noCertificateCheck to the jenkins-slave.xml in the jenkins directory if missing

    Generate id_rsa from MSYS2
    Copy it from C:\msys64\home\mysuser or C:\tools\msys64\home\mysuser to the user
    Add the key to Bitbucket
    Test doing git clone ssh://stash:7999/test/repo.git

    Change jenkins service to start as Log on as -> This account and use my user

    # Docker build on windows

    Fix docker

    `
    "C:\Program Files\Docker\Docker\DockerCli.exe" -SwitchDaemon
    `

    Build docker image

    `
    docker pull mcr.microsoft.com/windows/servercore:ltsc2019

    cd /c/workspace/fusionrisk-ansible/roles/windows/
    docker login
    docker build .
    `

  usage: |
    Run the following command :

    `ansible-playbook -i hosts -c local -v windows.yml -vvvv --ask-sudo-pass | tee setup.log`

  #custom: |
  #  Any custom output you want after the usage section..
